from typing import Any, TypeVar, Generic, Type
from .fields import BooleanField, Field

_M = TypeVar("_M", bound="Model")

class Model:
    objects: "Manager[Model]"
    pk: Any

    def save(self, *args: Any, **kwargs: Any) -> None: ...
    def delete(self, *args: Any, **kwargs: Any) -> tuple[int, dict[str, int]]: ...

class Manager(Generic[_M]):
    def all(self) -> "QuerySet[_M]": ...
    def get(self, *args: Any, **kwargs: Any) -> _M: ...
    def filter(self, *args: Any, **kwargs: Any) -> "QuerySet[_M]": ...
    def create(self, *args: Any, **kwargs: Any) -> _M: ...

class QuerySet(Generic[_M]):
    def all(self) -> "QuerySet[_M]": ...
    def filter(self, *args: Any, **kwargs: Any) -> "QuerySet[_M]": ...
    def get(self, *args: Any, **kwargs: Any) -> _M: ...
    def exists(self) -> bool: ...
    def count(self) -> int: ...
    def values_list(self, *args: Any, **kwargs: Any) -> "QuerySet[Any]": ...

__all__ = ["Field", "BooleanField", "Model", "Manager", "QuerySet"]
