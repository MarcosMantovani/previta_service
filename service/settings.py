# -*- coding: utf-8 -*-

"""
Django settings for app project.

Generated by 'django-admin startproject' using Django 1.9.4.

For more information on this file, see
https://docs.djangoproject.com/en/1.9/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/1.9/ref/settings/
"""
import os
import ssl
from datetime import timedelta

from django.conf.locale.pt_BR import formats as pt_BR_formats
from unipath import Path

GIT_VERSION = os.environ.get("GIT_VERSION")

BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
PROJECT_DIR = Path(__file__).parent

SECRET_KEY = os.environ["DJANGO_SECRET_KEY"]
DEBUG = os.environ.get("DJANGO_DEBUG", "False").lower() == "true"

ANONYMOUS_USER_NAME = None

ALLOWED_HOSTS = [
    "127.0.0.1",
    "localhost",
    "previta-service",
    "host.docker.internal",
    "service.previta.com.br",
    "service-previta.ngrok.app",
    ".ngrok-free.app",
]

ALLOWED_CIDR_NETS = [
    "162.240.0.0/16",
    "162.215.0.0/16",
    "172.16.0.0/12",  # rede docker-compose / host-only
    "172.17.0.0/16",  # docker bridge default
    "172.18.0.0/16",  # outras redes Docker
    "127.0.0.1/32",
    "::1/128",
    "10.0.0.0/8",
    "192.168.0.0/16",
    "162.214.96.54/32",  # IP externo do próprio servidor
]


CSRF_TRUSTED_ORIGINS = [
    "http://localhost:3000",
    "https://app.previta.com.br",
    "https://service.previta.com.br",
    "https://evolution.previta.com.br",
    "https://app-previta.ngrok.app",
    "https://*.ngrok-free.app",
]

# SESSION_COOKIE_DOMAIN = '.previta.com.br'

SITE_ID = 1

# Application definition

AUTHENTICATION_BACKENDS = [
    "django.contrib.auth.backends.ModelBackend",
    "guardian.backends.ObjectPermissionBackend",
]

INSTALLED_APPS = [
    "whitenoise.runserver_nostatic",
    "adminsortable2",
    "martor",
    "jazzmin",
    "dal",
    "dal_select2",
    "django.contrib.admin",
    "django.contrib.auth",
    "daphne",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.sites",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "django.contrib.postgres",
    "django.forms",
    "django_json_widget",
    "django_ace",
    "universal_uploader_widget",
    "django_extensions",
    "drf_spectacular",
    "django_celery_results",
    "django_celery_beat",
    "django_filters",
    "sequences.apps.SequencesConfig",
    "debug_toolbar",
    "admin_auto_filters",
    "rest_framework",
    "guardian",
    "taggit",
    "django_admin_inline_paginator",
    "django_summernote",
    "admin_extra_buttons",
    "storages",
    "djmoney",
    "mapwidgets",
    "import_export",
    "widget_tweaks",
    "memoize",
    "polymorphic",
    "nested_admin",
    "multiselectfield",
    "channels",
    "channels_redis",
    "corsheaders",
    "phonenumber_field",
    "localflavor",
    "solo",
    "service.apps.ServiceConfig",
    "common",
    "authentication",
    "users",
    "autogfk",
    "residents",
    "appointments",
    "medications",
]

MIDDLEWARE = [
    "corsheaders.middleware.CorsMiddleware",
    "django.middleware.security.SecurityMiddleware",
    "whitenoise.middleware.WhiteNoiseMiddleware",
    "django.middleware.gzip.GZipMiddleware",
    "debug_toolbar.middleware.DebugToolbarMiddleware",
    "allow_cidr.middleware.AllowCIDRMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
    "django.middleware.locale.LocaleMiddleware",
]

APPEND_SLASH = False

PHONENUMBER_DEFAULT_REGION = "BR"
PHONENUMBER_DEFAULT_FORMAT = "INTERNATIONAL"
PHONENUMBER_DB_FORMAT = "NATIONAL"
WHITENOISE_MANIFEST_STRICT = False

CORS_ALLOW_CREDENTIALS = True

CORS_ORIGIN_WHITELIST = [
    "http://localhost:3000",
    "http://localhost:3001",
    "https://app.previta.com.br",
    "https://service.previta.com.br",
    "https://evolution.previta.com.br",
    "https://service-previta.ngrok.app",
    "https://app-previta.ngrok.app",
    "https://*.ngrok-free.app",
]

CORS_ALLOW_ALL_ORIGINS = DEBUG

CORS_ALLOW_HEADERS = (
    "accept",
    "accept-encoding",
    "accept-language",
    "authorization",
    "connection",
    "content-type",
    "content-disposition",
    "content-length",
    "host",
    "referer",
    "dnt",
    "origin",
    "user-agent",
    "x-csrftoken",
    "x-requested-with",
    "ngrok-skip-browser-warning",
    "cache-control",
    "pragma",
    "x-forwarded-for",
    "x-forwarded-proto",
    "x-forwarded-host",
)


ROOT_URLCONF = "service.urls"


TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [os.path.join(BASE_DIR, "templates/")],
        "APP_DIRS": True,
        "OPTIONS": {
            "debug": DEBUG,
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.template.context_processors.i18n",
                "django.template.context_processors.media",
                "django.template.context_processors.static",
                "django.template.context_processors.tz",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]


WSGI_APPLICATION = "service.wsgi.application"

DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.postgresql_psycopg2",
        "USER": os.environ["DATABASE_USER"],
        "NAME": os.environ["DATABASE_NAME"],
        "HOST": os.environ["DATABASE_HOST"],
        "PASSWORD": os.environ["DATABASE_PASSWORD"],
        "PORT": os.environ["DATABASE_PORT"],
        "CONN_MAX_AGE": 60,
        "OPTIONS": {"sslmode": "disable"},
    },
    # "previta_legacy": {
    #     "ENGINE": "django.db.backends.postgresql",
    #     "NAME": "previta_import",
    #     "USER": "postgres",
    #     "PASSWORD": "GT@564213manut",
    #     "HOST": "host.docker.internal",
    #     "PORT": "5432",
    # }
}

# Configuração do roteador de banco de dados para modelos legados
# DATABASE_ROUTERS = ['service.db_router.LegacyDatabaseRouter']


# Password validation
# https://docs.djangoproject.com/en/1.9/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


LANGUAGE_CODE = "pt-BR"

TIME_ZONE = "America/Sao_Paulo"

USE_I18N = True

USE_L10N = True

USE_TZ = False
DJANGO_CELERY_BEAT_TZ_AWARE = False
CELERY_BEAT_TZ_AWARE = False

ADMIN_URL = "admin/"
LOGIN_REDIRECT_URL = "/admin/"

new_context = ssl.SSLContext()  # this sets the verify_mode to 'CERT_NONE'

MEDIA_URL = "/uploads/"
MEDIA_ROOT = "%s/uploads" % BASE_DIR
S3_ENABLED = os.environ.get("DJANGO_S3_ENABLED", "False").lower() == "true"

if S3_ENABLED:
    DEFAULT_FILE_STORAGE = "common.storages.ConditionalS3CacheStorage"

S3_IS_PUBLIC = os.environ.get("DJANGO_S3_IS_PUBLIC", "False").lower() == "true"

if not S3_IS_PUBLIC:
    AWS_DEFAULT_ACL = "private"  # nada de public-read
    AWS_QUERYSTRING_AUTH = True  # habilita URL assinado
    AWS_QUERYSTRING_EXPIRE = 900  # 15 minutos de validade (segundos)

AWS_ACCESS_KEY_ID = os.environ.get("DJANGO_S3_ACCESS_KEY")
AWS_SECRET_ACCESS_KEY = os.environ.get("DJANGO_S3_SECRET_KEY")
AWS_STORAGE_BUCKET_NAME = os.environ.get("DJANGO_S3_BUCKET")
AWS_S3_REGION_NAME = os.environ.get("DJANGO_S3_REGION")  # ex.: "us-east-1"
AWS_S3_USE_SSL = os.environ.get("DJANGO_S3_USE_SSL")
AWS_S3_ENDPOINT_URL = os.environ.get("DJANGO_S3_ENDPOINT_URL")
AWS_S3_ADDRESSING_STYLE = os.environ.get("DJANGO_S3_ADDRESSING_STYLE")

STATIC_URL = "/static/"
STATIC_ROOT = "%s/static" % BASE_DIR
STATICFILES_DIRS = [
    ("admin", os.path.join(BASE_DIR, "common/static/admin")),
]

# for static, use default storage
STATICFILES_STORAGE = "django.contrib.staticfiles.storage.StaticFilesStorage"

CANONICAL_URL = os.getenv("CANONICAL_URL")

DEBUG_TOOLBAR_PATCH_SETTINGS = DEBUG

DEBUG_TOOLBAR_PANELS = [
    "debug_toolbar.panels.versions.VersionsPanel",
    "debug_toolbar.panels.timer.TimerPanel",
    "debug_toolbar.panels.settings.SettingsPanel",
    "debug_toolbar.panels.headers.HeadersPanel",
    # "debug_toolbar.panels.request.RequestPanel",
    "debug_toolbar.panels.sql.SQLPanel",
    "debug_toolbar.panels.staticfiles.StaticFilesPanel",
    "debug_toolbar.panels.templates.TemplatesPanel",
    "debug_toolbar.panels.cache.CachePanel",
    "debug_toolbar.panels.signals.SignalsPanel",
    "debug_toolbar.panels.logging.LoggingPanel",
    "debug_toolbar.panels.redirects.RedirectsPanel",
]

FILE_UPLOAD_DIRECTORY_PERMISSIONS = 0o777 if not DEBUG else None
FILE_UPLOAD_PERMISSIONS = 0o777 if not DEBUG else None


def show_toolbar(request):
    # if DEBUG:
    #     return True

    return True


DEBUG_TOOLBAR_CONFIG = {
    "INTERCEPT_REDIRECTS": False,
    "SHOW_TOOLBAR_CALLBACK": lambda r: DEBUG,  # disables it
    "IS_RUNNING_TESTS": False,
}


AUTH_USER_MODEL = "users.User"
DEFAULT_AUTO_FIELD = "django.db.models.AutoField"
LOGIN_URL = "/admin/login/"
LOGOUT_REDIRECT_URL = "/admin/login/"

REDIS_HOST = os.environ.get("REDIS_HOST", "host.docker.internal")
REDIS_PORT = os.environ.get("REDIS_PORT", 6379)
REDIS_DB = os.environ.get("REDIS_DB", 0)
REDIS_USER = os.environ.get("REDIS_USER", "default")
REDIS_PASSWORD = os.environ.get("REDIS_PASSWORD", "default")

REDIS_URL = (
    f"redis://{REDIS_USER}:{REDIS_PASSWORD}@{REDIS_HOST}:{REDIS_PORT}/{REDIS_DB}"
)

if REDIS_USER == "default" and REDIS_PASSWORD == "default":
    REDIS_URL = f"redis://{REDIS_HOST}:{REDIS_PORT}/{REDIS_DB}"


CHANNEL_LAYERS = {
    "default": {
        "BACKEND": "channels_redis.core.RedisChannelLayer",
        "CONFIG": {
            "hosts": [REDIS_URL],
            "capacity": 2000,  # Reduced from 3000 to optimize Redis memory usage
            "expiry": 60,  # FIXED: was 10s, causing premature disconnections
            "serializer_format": "json",
            # Additional Redis optimizations
            "group_expiry": 300,  # Groups expire after 5 minutes of inactivity
            "symmetric_encryption_keys": [],  # No encryption for performance
        },
    }
}

ASGI_APPLICATION = "service.asgi.application"

LOGGING = {
    "version": 1,
    "disable_existing_loggers": False,
    "handlers": {
        "console": {
            "class": "logging.StreamHandler",
        },
    },
    "loggers": {
        "django": {
            "handlers": ["console"],
            "level": os.getenv("DJANGO_LOG_LEVEL", "INFO"),
        },
        "daphne": {
            "handlers": [
                "console",
            ],
            "level": os.getenv("DJANGO_LOG_LEVEL", "INFO"),
        },
        "": {
            "handlers": [
                "console",
            ],
            "level": os.getenv("DJANGO_LOG_LEVEL", "INFO"),
        },
    },
}

LOG_DB_QUERIES = os.getenv("DJANGO_LOG_DB_QUERIES", "False").lower() == "true"

if LOG_DB_QUERIES:
    LOGGING["loggers"]["django.db.backends"] = {
        "handlers": ["console"],
        "level": "DEBUG" if DEBUG else "INFO",
        "propagate": False,
    }

INTERNAL_IPS = [
    "127.0.0.1",
]


SECURE_PROXY_SSL_HEADER = ("HTTP_X_FORWARDED_PROTO", "https")
USE_X_FORWARDED_HOST = True
USE_X_FORWARDED_PORT = True

CACHES = {
    "default": {
        "BACKEND": "django_redis.cache.RedisCache",
        "LOCATION": REDIS_URL,
    },
}

pt_BR_formats.DATETIME_FORMAT = "d/m/Y H:i:s"

SIMPLE_JWT = {
    "ACCESS_TOKEN_LIFETIME": timedelta(days=5),
    "REFRESH_TOKEN_LIFETIME": timedelta(days=5),
    "UPDATE_LAST_LOGIN": True,
}


CELERY_RESULT_BACKEND = "django-db"
CELERY_BEAT_SCHEDULER = "django_celery_beat.schedulers:DatabaseScheduler"
CELERY_BROKER_URL = REDIS_URL

X_FRAME_OPTIONS = "SAMEORIGIN"
SILENCED_SYSTEM_CHECKS = ["security.W019"]

JAZZMIN_SETTINGS = {
    "related_modal_active": True,
    "changeform_format": "hortizontal_tabs",
    "custom_css": "common/css/admin.css",
    "site_title": "Previta - Bot",
    "site_header": "Previta",
    "welcome_sign": "",
    "site_brand": "",
    "related_modal_active": True,
}

JAZZMIN_UI_TWEAKS = {"theme": "sandstone"}


REST_FRAMEWORK = {
    # YOUR SETTINGS
    "DEFAULT_SCHEMA_CLASS": "common.openapi.BotAutoSchema",
    "DEFAULT_AUTHENTICATION_CLASSES": (
        "rest_framework.authentication.SessionAuthentication",
        "rest_framework_simplejwt.authentication.JWTAuthentication",
    ),
    "DEFAULT_PAGINATION_CLASS": "rest_framework.pagination.PageNumberPagination",
    "PAGE_SIZE": 20,
    "DEFAULT_FILTER_BACKENDS": ["django_filters.rest_framework.DjangoFilterBackend"],
}


SPECTACULAR_SETTINGS = {
    "TITLE": "Zeinbot - Bot API",
    "DESCRIPTION": "Zeinbot - Bot API",
    "VERSION": "1.0.0",
    "SERVE_INCLUDE_SCHEMA": True,
    "SWAGGER_UI_SETTINGS": {
        "deepLinking": True,
        "persistAuthorization": True,
        "displayOperationId": False,
    },
    "COMPONENT_SPLIT_REQUEST": True,
    "SCHEMA_PATH_PREFIX": r"/api/",
    "TAGS": [
        {
            "name": "authentication",
            "description": "Autenticação e gerenciamento de usuários",
        },
    ],
}


SUMMERNOTE_CONFIG = {
    # You can put custom Summernote settings
    "summernote": {
        # As an example, using Summernote Air-mode
        "airMode": False,
        # Toolbar customization
        # https://summernote.org/deep-dive/#custom-toolbar-popover
        "toolbar": [
            ["style", ["style"]],
            [
                "font",
                [
                    "bold",
                    "underline",
                    "clear",
                    "strikethrough",
                    "italic",
                    "superscript",
                    "subscript",
                ],
            ],
            ["para", ["ul", "ol", "paragraph"]],
            ["table", ["table"]],
            ["insert", ["link", "picture"]],
            ["view", ["fullscreen", "codeview", "help"]],
        ],
        "hint": {
            "mentions": ["@sandrosalles", "@joaodasilva"],
            "match": "/\B@(\w*)$/",
            "search": """
                function (keyword, callback) {
                    callback($.grep(this.mentions, function (item) {
                        return item.indexOf(keyword) == 0;
                    }));
                }
            """,
            "content": """
                function (item) {
                    return '@' + item;
                }
            """,
        },
    },
    "attachment_absolute_uri": True,
}

TAGGIT_CASE_INSENSITIVE = True
TAGGIT_STRIP_UNICODE_WHEN_SLUGIFYING = True


ASGI_APPLICATION_TIMEOUT = 120
STATIC_FILES_TIMEOUT = 60


CURRENCIES = ("BRL",)
DEFAULT_CURRENCY = "BRL"


CSRF_COOKIE_HTTPONLY = False

LANGUAGES = [
    ("pt-BR", "Portuguese Brazil"),
    # ... other languages ...
]


EVOLUTION_URL = os.getenv("SERVER_URL")
SERVICE_URL = os.getenv("SERVICE_BASE_URL")
AUTHENTICATION_API_KEY = os.getenv("AUTHENTICATION_API_KEY")


MEDIA_PROXY_BASE = "https://service.previta.com.br/media-proxy"
MEDIA_PROXY_SECRET = os.getenv("MEDIA_PROXY_SECRET")


MARTOR_ENABLE_LABEL = True
MARTOR_THEME = "semantic"  # or 'semantic'

MARTOR_ENABLE_CONFIGS = {
    "emoji": "true",  # Enable/disable emoji icons
    "imgur": "false",  # Enable/disable imgur/custom uploader
    "mention": "false",  # Enable/disable user mentions
    "jquery": "true",  # Include/exclude jQuery (required for admin)
    "living": "false",  # Enable/disable live preview updates
    "spellcheck": "false",  # Enable/disable spellcheck
    "hljs": "true",  # Enable/disable syntax highlighting
}
