import random
from datetime import date, datetime, time, timedelta
from django.core.management.base import BaseCommand
from django.conf import settings
from django.utils import timezone
from faker import Faker
from residents.models import Resident
from medications.models import Medication
from appointments.models import (
    AppointmentExam,
    ExamAttachment,
    TypeChoices,
    StatusChoices,
)


class Command(BaseCommand):
    help = "Popula a aplica√ß√£o com dados fict√≠cios para desenvolvimento"

    def add_arguments(self, parser):
        parser.add_argument(
            "--residents",
            type=int,
            default=20,
            help="N√∫mero de residentes para criar (padr√£o: 20)",
        )
        parser.add_argument(
            "--clear",
            action="store_true",
            help="Limpa dados existentes antes de criar novos",
        )

    def handle(self, *args, **options):
        fake = Faker("pt_BR")

        if options["clear"]:
            self.stdout.write("üóëÔ∏è  Limpando dados existentes...")
            ExamAttachment.objects.all().delete()
            AppointmentExam.objects.all().delete()
            Medication.objects.all().delete()
            Resident.objects.all().delete()
            self.stdout.write(self.style.SUCCESS("‚úÖ Dados limpos com sucesso!"))

        num_residents = options["residents"]

        self.stdout.write(f"üè• Criando {num_residents} residentes...")

        # Listas para dados mais realistas
        health_conditions = [
            "Hipertens√£o arterial, diabetes tipo 2",
            "Alzheimer em est√°gio inicial",
            "Artrite reumatoide, osteoporose",
            "Insufici√™ncia card√≠aca leve",
            "Dem√™ncia vascular",
            "Parkinson em est√°gio inicial",
            "DPOC (Doen√ßa Pulmonar Obstrutiva Cr√¥nica)",
            "Fibromialgia, ansiedade",
            "Diabetes tipo 2, neuropatia diab√©tica",
            "Osteoartrose, hipertens√£o",
        ]

        medications_list = [
            ("Losartana", "50mg", "Cont√≠nuo"),
            ("Metformina", "850mg", "Cont√≠nuo"),
            ("Omeprazol", "20mg", "Cont√≠nuo"),
            ("Sinvastatina", "40mg", "Cont√≠nuo"),
            ("Captopril", "25mg", "Cont√≠nuo"),
            ("Glibenclamida", "5mg", "Cont√≠nuo"),
            ("Propranolol", "40mg", "Cont√≠nuo"),
            ("Amitriptilina", "25mg", "Cont√≠nuo"),
            ("Paracetamol", "500mg", "7 dias"),
            ("Ibuprofeno", "600mg", "5 dias"),
            ("Rivotril", "0,5mg", "Cont√≠nuo"),
            ("Donepezila", "10mg", "Cont√≠nuo"),
        ]

        appointment_descriptions = [
            "Consulta cardiol√≥gica de rotina",
            "Avalia√ß√£o geri√°trica geral",
            "Consulta neurol√≥gica",
            "Exame de sangue - hemograma completo",
            "Ecocardiograma",
            "Tomografia computadorizada",
            "Consulta com psic√≥logo",
            "Fisioterapia - sess√£o individual",
            "Consulta oftalmol√≥gica",
            "Exame de urina",
            "Radiografia de t√≥rax",
            "Consulta endocrinol√≥gica",
        ]

        residents = []

        # Criar residentes
        for i in range(num_residents):
            birth_date = fake.date_of_birth(minimum_age=65, maximum_age=95)

            resident = Resident.objects.create(
                name=fake.name(),
                date_of_birth=birth_date,
                family_contact=f"{fake.name()} - {fake.phone_number()}",
                health_history=random.choice(health_conditions),
                notes=(
                    fake.text(max_nb_chars=200) if random.choice([True, False]) else ""
                ),
            )
            residents.append(resident)

        self.stdout.write(
            self.style.SUCCESS(f"‚úÖ {len(residents)} residentes criados!")
        )

        # Criar medica√ß√µes
        self.stdout.write("üíä Criando medica√ß√µes...")
        total_medications = 0

        for resident in residents:
            # Cada residente tem entre 1 e 5 medica√ß√µes
            num_medications = random.randint(1, 5)

            for _ in range(num_medications):
                med_name, dosage, duration = random.choice(medications_list)

                # Hor√°rios comuns para medica√ß√µes
                schedule_times = [
                    time(6, 0),  # 06:00
                    time(8, 0),  # 08:00
                    time(12, 0),  # 12:00
                    time(18, 0),  # 18:00
                    time(20, 0),  # 20:00
                    time(22, 0),  # 22:00
                ]

                Medication.objects.create(
                    resident=resident,
                    name=med_name,
                    dosage=dosage,
                    schedule_time=random.choice(schedule_times),
                    duration=duration,
                    is_active=random.choice([True, True, True, False]),  # 75% ativo
                )
                total_medications += 1

        self.stdout.write(
            self.style.SUCCESS(f"‚úÖ {total_medications} medica√ß√µes criadas!")
        )

        # Criar consultas e exames
        self.stdout.write("ü©∫ Criando consultas e exames...")
        total_appointments = 0

        for resident in residents:
            # Cada residente tem entre 3 e 8 consultas/exames
            num_appointments = random.randint(3, 8)

            for _ in range(num_appointments):
                # Data entre 6 meses atr√°s e 3 meses √† frente
                # Como USE_TZ = False, trabalharemos com datetime naive

                if settings.USE_TZ:
                    now = timezone.now()
                else:
                    now = datetime.now()

                start_date = now.date() - timedelta(days=180)
                end_date = now.date() + timedelta(days=90)

                # Gerar data e hora separadamente
                appointment_date_naive = fake.date_between(
                    start_date=start_date, end_date=end_date
                )
                appointment_time = fake.time_object()

                # Combinar data e hora
                appointment_date = datetime.combine(
                    appointment_date_naive, appointment_time
                )

                # Se USE_TZ = True, aplicar timezone
                if settings.USE_TZ:
                    appointment_date = timezone.make_aware(appointment_date)

                # Status baseado na data
                if appointment_date < now:
                    status = random.choice(
                        [
                            StatusChoices.COMPLETED,
                            StatusChoices.COMPLETED,
                            StatusChoices.PENDING,
                        ]
                    )
                else:
                    status = StatusChoices.SCHEDULED

                appointment = AppointmentExam.objects.create(
                    resident=resident,
                    type=random.choice(TypeChoices.choices)[0],
                    description=random.choice(appointment_descriptions),
                    date_time=appointment_date,
                    status=status,
                    notes=(
                        fake.text(max_nb_chars=150)
                        if random.choice([True, False])
                        else ""
                    ),
                )
                total_appointments += 1

                # Alguns exames t√™m anexos (apenas registros, sem arquivos reais)
                if (
                    appointment.type == TypeChoices.EXAM
                    and appointment.status == StatusChoices.COMPLETED
                    and random.choice([True, False])
                ):

                    ExamAttachment.objects.create(
                        resident=resident,
                        appointment_exam=appointment,
                        file="exam_attachments/2024/01/exemplo_exame.pdf",  # arquivo fict√≠cio
                        description=f"Resultado: {appointment.description}",
                    )

        self.stdout.write(
            self.style.SUCCESS(f"‚úÖ {total_appointments} consultas/exames criados!")
        )

        # Estat√≠sticas finais
        self.stdout.write("\nüìä Estat√≠sticas finais:")
        self.stdout.write(f"   üë• Residentes: {Resident.objects.count()}")
        self.stdout.write(f"   üíä Medica√ß√µes: {Medication.objects.count()}")
        self.stdout.write(f"   ü©∫ Consultas/Exames: {AppointmentExam.objects.count()}")
        self.stdout.write(f"   üìé Anexos: {ExamAttachment.objects.count()}")

        # Estat√≠sticas por status
        scheduled = AppointmentExam.objects.filter(
            status=StatusChoices.SCHEDULED
        ).count()
        completed = AppointmentExam.objects.filter(
            status=StatusChoices.COMPLETED
        ).count()
        pending = AppointmentExam.objects.filter(status=StatusChoices.PENDING).count()

        self.stdout.write("\nüìÖ Status das consultas:")
        self.stdout.write(f"   ‚è∞ Agendadas: {scheduled}")
        self.stdout.write(f"   ‚úÖ Conclu√≠das: {completed}")
        self.stdout.write(f"   ‚ö†Ô∏è  Pendentes: {pending}")

        self.stdout.write(self.style.SUCCESS("\nüéâ Dados criados com sucesso!"))
        self.stdout.write(
            "\nüí° Para limpar e recriar dados, use: python manage.py populate_data --clear"
        )
